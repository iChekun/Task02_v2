
     Задание:
     3. Туристические путевки. Сформировать набор предложений клиенту по выбору туристической путевки различного типа
      (отдых, экскурсии, лечение, шопинг, круиз и тд) для оптимального выбора.
      Учитывать возможность выбора транспорта, питания и числа дней.
      Реализовать выбор и сортировку на основе одного и нескольких параметров.

---------------------------------------------------------------------------------------------------------------------
    Реализация:

1. Исправлена логика программы:
       controller -> TripService -> Repository -> DAO -> storage

2. Использован паттерн Command для фабричного метода: теперь при изменении колва параметров не нужно менять фабрику,
 нужно только зайти в реализацию заполнения объекта и там внести нужные изменения.
 Благодаря этому паттерну исчез дубликат заполнения, тк у всех поездок есть одинаковые поля от родителя и в пред
 версии был дубликат, теперь же общая часть инкапсулирована в отдельный объект с методом fillTrip
 и он вызывается в каждом классе заполнения,а  для заполнения уникальных полей объектов используются setters


3. Изменена реализация TripValidator. Также применем паттрен Command
 благодаря ему теперь при добавлннии новых сущостей не нужно будет трогать валидатор, а нужно будет добавить только
 TripValidatorCommand нужного типа с нужными проверками и через фабрику будет выдаватья соотвестующая реализация.
Опять же сократился код на прооверке того, что есть у всех от родителя, тк эти проверки вынесенеы в отдельый класс
и вызвается метож проверки этого класса.


4.Изменена реализация репозитория. Убраны все проверки и тд, тк предполагается что вся инфа валидируется на уровне выше
в service. Все методы делегируют свое задания в соотвествующий DAO, который выбирается с поощью DAOFactory.
такой вывод гарантирует неизменность кода при смене реализации слоя DAO.

5.Изменен слой DAO. Добавлен файл который читает путь к файлу из property файла. Если там нет пути, он установит дефолтное,
если и его не будет, то пользовательн будет получать исключения о том. что база данных не доступна.
   Реализация работы с файлами сделана через java nio.
   Добавлен дефолтная кодировка UTF-8.
   Все методы полностью безопасны и в случае ошибки будут выбрасывать соотвествующее исключение с инфорамцией и пробелеме

6.Изменены спецификации. Добавлена возмонжость создавать их динамически путем добавление and or not вариантов.
   Можно поставить отправить для поиска любое колво вариаций.
   Спецификции работаеют со строкой.
   Был добавлен объект из первого таска Criteria.
   Используется при поиске. Класс чуть изменен, вместо параметра object, был поставлен generic , а ключ остался String
   Объект удобно используется в спецификацияъ, путем добавления в него нужного поля и значения поиска.
   Был добавлен LineValidator который проверял входящую строку по объекту Criteria и если он подходил то возращался true
   Парсер вынесен во внешний класс,  тк его функции используютя по всей программе.
   Спецификации по диапазону была добавлена с использованием в спецификации парсера , котороый получал нужное значение
   парсил его в нужное число и тд, и после сравнивал.

7. Через pom был подтянут log4j2 и TestNG
 Настойка логера была через xml файл на два аппендера, один из которых сохраняет конкретную инфу о работе. а второй общий,
 в который пишется все подряд.

8. При некорректной инфе в файле программа не упадет.
Есть защитиа от NullPointer
Есть все проверки при чтении файла есть.
Есть все проверки при добавлении некорректный объектов есть.